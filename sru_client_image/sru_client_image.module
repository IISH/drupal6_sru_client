<?php
// $Id$

/*
 * @file
 *  SRU Client Image module.
 *
 * If an asset contains a remote image, this module will create a local thumbnail copy.
 */

function sru_client_image_init() {
  module_load_include('inc', 'sru_client_image', 'sru_client_image');
  // Include the views include file.
  module_load_include('inc', 'sru_client_image', 'sru_client_image.views');
}

/**
 * Implementation of hook_menu().
 */
function sru_client_image_menu() {
  $items = array();
  $items['admin/settings/sru/image'] = array(
    'title' => 'Asset images',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sru_client_image_admin_settings'),
    'access arguments' => array('administer SRU'),
    'file' => 'sru_client_image.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_theme
 */
function sru_client_image_theme() {
  return array(
    'sru_client_image' => array(
      'arguments' => array('image'),
    ),
  );
}


/**
 * Implementation of hook_file_download().
 */
function sru_client_image_file_download($filename) {
  $filepath = file_create_path($filename);

  // Check if it's one of our files.
  $nid = db_result(db_query("SELECT ici.nid FROM {sru_client_image} ici INNER JOIN {files} f ON ici.fid = f.fid WHERE f.filepath = '%s'", $filepath));
  if ($nid && $node = node_load($nid)) {
    // Make sure they're allowed to view the node.
    if (node_access('view', $node)) {
      $info = image_get_info($filepath);
      return array(
        'Content-Type: '. mime_header_encode($info['mime_type']),
        'Content-Length: '. (int) $info['file_size'],
      );
    }

    // Access denied.
    return -1;
  }
}


/**
 * Implementation of hook_form_alter().
 *
 * Here we add our image field to the asset node form.
 */
function sru_client_image_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'sru_client_asset_node_form') {

    $form['sru_client_image'] = array(
      '#type' => 'textfield', 
      '#title' => t('Image thumbnail'),
      '#description' => t('Local thumbnail copy of an asset image'),
      '#default_value' => isset($form['#node']->image->filepath) ? $form['#node']->image->filepath : '',
    );
  }
}


/**
 * Implementation of hook_nodeapi().
 */
function sru_client_image_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'sru_client_asset') {
    switch ($op) {
      case 'load':
        return sru_client_image_nodeapi_load($node);
      case 'presave':
        return sru_client_image_nodeapi_presave($node);
      case 'insert':
        return sru_client_image_nodeapi_insert($node);
      case 'update':
        return sru_client_image_nodeapi_update($node);
      case 'delete':
        return sru_client_image_nodeapi_delete($node);
    }
  }
}

function sru_client_image_nodeapi_load($node) {
  $ret['image'] = array();
  $result = db_query("SELECT f.fid, f.filemime, f.filepath, f.filesize, f.status, i.nid, i.vid, i.width, i.height FROM {files} f INNER JOIN {sru_client_image} i ON f.fid = i.fid WHERE i.vid = %d", $node->vid);
  if ($img = db_fetch_object($result)) {
    $ret['image'] = $img;
  }
  return $ret;
}


/*
 * Temporarily save a local thumbnail copy.
 */
function sru_client_image_nodeapi_presave(&$node) {
  // Add new local image if remote image exists.
  if (($source = $node->source) && !($node->sru_client_image)) {
    $validators = array(
      'file_validate_is_image' => array(),
      'file_validate_image_resolution' => 
        array(variable_get('sru_client_image_size', '260x260')),
    );

    if ($image = sru_client_image_save_download($source, $validators)) {
      // file temporarily saved
      if ($imageinfo = image_get_info($image->filepath)) {
        // info: width, height, file_size, mime_type
        $image->width  = $imageinfo['width'];
        $image->height = $imageinfo['height'];
        $node->image = $image;
      }
    }
  }
}


function sru_client_image_nodeapi_insert(&$node) {
  if ($image = $node->image) {
    $image = (object) $image;
    $image->nid = $node->nid;
    $image->vid = $node->vid;

    if (($image->status & FILE_STATUS_PERMANENT) != FILE_STATUS_PERMANENT) {
      // save file permanently
      $subdir = variable_get('sru_client_image_directory', 'images');
      $filename = $image->nid . sru_client_image_get_extension($image->filemime);
      $newpath = file_directory_path() . '/'. $subdir .'/'. $filename; 
      if (file_move($image, $newpath)) {
        $image->status |= FILE_STATUS_PERMANENT;
        drupal_write_record('files', $image, array('fid'));
      }
    }
    drupal_write_record('sru_client_image', $image);
    $node->image = $image;
  }
}

function sru_client_image_nodeapi_update(&$node) {
  if ($image = $node->image) {
    $image->nid = $node->nid;
    $image->vid = $node->vid;

    if (($image->status & FILE_STATUS_PERMANENT) != FILE_STATUS_PERMANENT) {
      // new image, save permanently
      $subdir = variable_get('sru_client_image_directory', 'images');
      $filename = $image->nid . sru_client_image_get_extension($image->filemime);
      $newpath = file_directory_path() . '/'. $subdir .'/'. $filename; 
      if (file_move($image, $newpath)) {
        $image->status |= FILE_STATUS_PERMANENT;
        drupal_write_record('files', $image, array('fid'));
      }
      // remove old file
      $result = db_query('SELECT i.fid, f.filepath FROM {sru_client_image} i INNER JOIN {files} f ON i.fid = f.fid WHERE nid = %d', $node->nid);
      if ($file = db_fetch_object($result)) {
        _sru_client_image_delete($file);
      }
      db_query('DELETE FROM {sru_client_image} WHERE nid = %d', $node->nid);

      // write new file
      drupal_write_record('sru_client_image', $image);
      $node->image = $image;
    }
  }
}

function sru_client_image_nodeapi_delete(&$node) {
  // Delete the image files and remove them from the database.
  $result = db_query('SELECT i.fid, f.filepath FROM {sru_client_image} i INNER JOIN {files} f ON i.fid = f.fid WHERE nid = %d', $node->nid);
  if ($file = db_fetch_object($result)) {
    _sru_client_image_delete($file);
  }
  db_query('DELETE FROM {sru_client_image} WHERE nid = %d', $node->nid);
}

/**
 * If a file isn't used delete it and remove the {files} table record. The
 * caller needs to remove record(s) from the {sru_client_image} table.
 *
 * @param $file File object
 */
function _sru_client_image_delete($file) {
  // Check if the file will be used after this revision is deleted
  $count = db_result(db_query('SELECT COUNT(fid) FROM {sru_client_image} WHERE fid = %d', $file->fid));

  // If the file won't be used, delete it.
  if ($count < 2) {
    db_query('DELETE FROM {files} WHERE fid = %d', $file->fid);
    file_delete($file->filepath);
  }
}


/*
 * This is an adjusted copy of core's file_save_upload().
 * Instead of processing a user uploaded file it downloads and saves a remote file located at $source.
 */
function sru_client_image_save_download($source = NULL, $validators = array(), $dest = FALSE, $replace = FILE_EXISTS_RENAME) {
  global $user;

  // If a file is available, process it.
  if ($source) {

    // Download the file.
    $httpfile = drupal_http_request(str_replace(' ', '%20', $source)); // TODO: escape more than just spaces.

    // Check for file download errors and return FALSE if an
    // error occurred.
    if (!($httpfile->code == 200 || $httpfile->redirect_code == 200)) {
      drupal_set_message(t('The file %file could not be downloaded (HTTP error: %code)', array('%file' => $source, '%code' => $httpfile->code)), 'error');
      watchdog('sru_client_image', t('The file %file could not be downloaded (HTTP error: %code)', array('%file' => $source, '%code' => $httpfile->code)), 'error');
      return 0;
    }

    // If the destination is not provided, or is not writable, then use the
    // temporary directory.
    if (empty($dest) || file_check_path($dest) === FALSE) {
      $dest = file_directory_temp();
    }

    // Begin building file object.
    $file = new stdClass();
    // We cannot depend on $source being a proper filename, so we create a new one.
    $file->filename = 'thumb_'. uniqid();
    $file->destination = file_destination(file_create_path($dest .'/'. $file->filename), $replace);

    // Save the file to the temporary directory.
    if (!($file->filepath = file_save_data($httpfile->data, $file->destination, FILE_EXISTS_RENAME))) {
      drupal_set_message(t('Download error. Could not save downloaded file %file.', array('%file' => $source)), 'error');
      watchdog('sru_client_image', t('Download error. Could not save downloaded file %file.', array('%file' => $source), 'error'));
      return 0;
    }

    $file->filemime = sru_client_image_get_mimetype($file->filepath);
    $file->filesize = filesize($file->filepath);

    // Call the validation functions.
    $errors = array();
    foreach ($validators as $function => $args) {
      array_unshift($args, $file);
      // Make sure $file is passed around by reference.
      $args[0] = &$file;
      $errors = array_merge($errors, call_user_func_array($function, $args));
    }

    // Check for validation errors.
    if (!empty($errors)) {
      $message = t('The selected file %name could not be downloaded.', array('%name' => $file->filename));
      if (count($errors) > 1) {
        $message .= '<ul><li>'. implode('</li><li>', $errors) .'</li></ul>';
      }
      else {
        $message .= ' '. array_pop($errors);
      }
      form_set_error($source, $message);
      return 0;
    }

    // If we made it this far it's safe to record this file in the database.
    $file->uid = $user->uid;
    $file->status = FILE_STATUS_TEMPORARY;
    $file->timestamp = time();
    drupal_write_record('files', $file);

    return $file;
  }
  return 0;
}


function sru_client_image_get_mimetype($filepath) {

  list($mimetype, $charset) = explode(';', exec("file -bi '". escapeshellarg($filepath) ."'"));

  // Catch exception:
  // "ERROR: cannot open `0' (No such file or directory)"
  if(substr($mimetype,0,5) == 'ERROR'){
    $mimetype ='';
  }

  return $mimetype;
}

function sru_client_image_get_extension($filemime) {
  switch ($filemime) {
    case 'image/gif' :
      return '.gif';
    case 'image/jpeg' :
      return '.jpg';
    case 'image/png' :
      return '.png';
    default :
      return '';
  }
}

/**
 * Create an <img> element for an asset image.
 */

function theme_sru_client_image($file, $alt = '', $title = '', $attributes = NULL) {
  $file = (array) $file;

  // Use cached width and height if available.
  if (!empty($file['data']['width']) && !empty($file['data']['height'])) {
    $attributes['width']  = $file['data']['width'];
    $attributes['height'] = $file['data']['height'];
  }
  // Otherwise pull the width and height from the file.
  elseif (list($width, $height, $type, $image_attributes) = @getimagesize($file['filepath'])) {
    $attributes['width'] = $width;
    $attributes['height'] = $height;
  }

  if (!empty($title)) {
    $attributes['title'] = $title;
  }

  // Alt text should be added even if it is an empty string.
  $attributes['alt'] = $alt;

  return theme('image', file_create_url($file['filepath']), 'alt', 'title', $attributes, FALSE);
}

